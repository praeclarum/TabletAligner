@page "/cdlitools"
@rendermode InteractiveServer

@inject CdliService CdliService;
@inject HttpClient http;

<PageTitle>CDLI Tools</PageTitle>

<h1>CDLI Tools</h1>

<p>@(CdliService.GetType())</p>

<p>@(CdliService.DownloadsDirectory)</p>
<p>@(CdliService.UnblockedAtfUrl)</p>

<button class="btn btn-primary" @onclick="GetPublications">Get Publications</button>
<button class="btn btn-primary" @onclick="GetAtf">Get ATF</button>

@* <p><pre>@atf[..Math.Min(atf.Length, 40000)]</pre></p> *@

<h2>Area Names</h2>
<p>
    @foreach (var ta in publications.SelectMany(x => x.TextAreas.Select(y => (y, x))).GroupBy(x => x.Item1.Name)) {
        <span>
            @if (expandedAreas.Contains(ta.Key)) {
                <button class="btn btn-primary" @onclick="() => expandedAreas.Remove(ta.Key)">@ta.Key -</button>
                <ul>
                    @foreach (var p in ta) {
                        <pre>@p.x.RawAtf</pre>
                    }
                </ul>
            }
            else {
                <button class="btn" @onclick="() => expandedAreas.Add(ta.Key)">@ta.Key +</button>
            }
        </span>
    }
</p>

<p>@error</p>

@code {
    private string atf = "";
    private Exception? error;
    Publication[] publications = [];
    List<string> expandedAreas = [];
    List<string> expandedPubs = [];
    async Task GetAtf() {
        try {
            atf = await CdliService.GetUnblockedAtfAsync(http);
            this.StateHasChanged();
            error = null;
        }
        catch (Exception e) {
            error = e;
        }
    }
    async Task GetPublications() {
        try {
            publications = await CdliService.GetPublicationsAsync(http);
            this.StateHasChanged();
            error = null;
        }
        catch (Exception e) {
            error = e;
        }
    }
}
